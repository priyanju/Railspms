class CommonSetting < ApplicationRecord
  enum type: {"Tenant-Setting": 1, "User-Setting": 2, "Machine-Setting": 3}
  enum machine_type: {"Ethernet": 1, "Rs232": 2, "Ct/Pt": 3}

  def self.part(tenant, shift_no, date)

    tenant = Tenant.find(tenant)
    shifts = Shifttransaction.includes(:shift).where(shifts: {tenant_id: tenant})
    shift = shifts.find_by_shift_no(shift_no)
       
    case
    when shift.day == 1 && shift.end_day == 1
      start_time = (date+" "+shift.shift_start_time).to_time
      end_time = (date+" "+shift.shift_end_time).to_time
    when shift.day == 1 && shift.end_day == 2
      start_time = (date+" "+shift.shift_start_time).to_time
      end_time = (date+" "+shift.shift_end_time).to_time+1.day
    else
      start_time = (date+" "+shift.shift_start_time).to_time+1.day
      end_time = (date+" "+shift.shift_end_time).to_time+1.day
    end
        
    tenant.machines.where(controller_type: 1).order(:id).map do |mac|
    machine_log = mac.machine_daily_logs.where("created_at >=? AND created_at <?",start_time,end_time).order(:id)
    machine_log.each_with_index do |log,ind|
      # machine_log.each_with_index do |log, index|
      #   if log.machine_status == 100  
      #   else	
      #    	if Machine.find(mac.id).parts.present?
      #    		last_part = mac.parts.last
      #      		if last_part.part.to_i == log.parts_count.to_i && last_part.program_number.to_i == log.programe_number.to_i
      #      		else
      #      		cutt = (log.total_cutting_time.to_i * 60) + (log.total_cutting_second.to_i / 1000)
           		
      #      		cutt_time = cutt - last_part.cutting_time.to_i
      #      		cycle_time = (log.run_time.to_i * 60) + (log.run_second.to_i / 1000)
           		
      #      		mac.parts.last.update(cutting_time: cutt_time, cycle_time: cycle_time, part_end_time: log.created_at)
      #      		Part.create(date: log.created_at, shift_no: nil, part: log.parts_count, program_number: log.programe_number, cycle_time: nil, cutting_time: cutt, cycle_st_to_st: nil, cycle_stop_to_stop: nil, time: nil, part_start_time: log.created_at, part_end_time: log.created_at, cycle_start: nil, status: 1, is_active: true, deleted_at: nil, shifttransaction_id: nil, machine_id: mac.id)
      #      	  end
      #    	else
      #    		cutt = (log.total_cutting_time.to_i * 60) + (log.total_cutting_second.to_i / 1000)
      #    		Part.create(date: log.created_at, shift_no: nil, part: log.parts_count, program_number: log.programe_number, cycle_time: nil, cutting_time: cutt, cycle_st_to_st: nil, cycle_stop_to_stop: nil, time: nil, part_start_time: log.created_at, part_end_time: log.created_at, cycle_start: nil, status: 1, is_active: true, deleted_at: nil, shifttransaction_id: nil, machine_id: mac.id)
      #    	end
      #   end
      # end
      unless log.machine_status == 100
 if mac.parts.count != 0
 cur_prod_data = mac.parts.last
           if cur_prod_data.part == log.parts_count && cur_prod_data.program_number == log.programe_number
              unless cur_prod_data.cycle_start.present? || log.machine_status != 3
                cyc_tym = (log.run_time.to_i)*60 + (log.run_time_seconds.to_i/1000)
                cur_prod_data.update(cycle_start: log.created_at, cycle_st_to_st: cyc_tym)
              end
              puts "SAME PART RUNNING"
           else

            cutt = (log.total_cutting_time.to_i * 60) + (log.total_cutting_second.to_i / 1000)
            cutt_time = cutt - cur_prod_data.cutting_time.to_i
            cycle_time = (log.run_time.to_i * 60) + (log.run_second.to_i / 1000)
            cur_prod_data.update(is_active: true,cutting_time: cutt_time, cycle_time: cycle_time, part_end_time: log.created_at, shift_no: shift.shift_no,shifttransaction_id: shift.id)
 
            if log.machine_status == 3
            st_time = log.created_at
          end
          cutt = (log.total_cutting_time.to_i * 60) + (log.total_cutting_second.to_i / 1000)
          Part.create(date: log.created_at, shift_no: shift.shift_no, part: log.parts_count, program_number: log.programe_number, cycle_time: nil, cutting_time: cutt, cycle_st_to_st: nil, cycle_stop_to_stop: nil, time: nil, part_start_time: log.created_at, part_end_time: log.created_at, cycle_start: st_time, status: 1, is_active: false, deleted_at: nil, shifttransaction_id: shift.id, machine_id: mac.id)
        # end

          end

        else
          if log.machine_status == 3
            st_time = log.created_at
          end
          cutt = (log.total_cutting_time.to_i * 60) + (log.total_cutting_second.to_i / 1000)
          Part.create(date: log.created_at, shift_no: shift.shift_no, part: log.parts_count, program_number: log.programe_number, cycle_time: nil, cutting_time: cutt, cycle_st_to_st: nil, cycle_stop_to_stop: nil, time: nil, part_start_time: log.created_at, part_end_time: log.created_at, cycle_start: st_time, status: 1, is_active: false, deleted_at: nil, shifttransaction_id: shift.id, machine_id: mac.id)
         end
      else
        puts "status 100"
      end
    end
    end
  end


  def self.report(tenant, shift_no, date)

    @alldata = []
    tenant = Tenant.find(tenant)
    shifts = Shifttransaction.includes(:shift).where(shifts: {tenant_id: tenant})
    shift = shifts.find_by_shift_no(shift_no)
    case
    when shift.day == 1 && shift.end_day == 1
      start_time = (date+" "+shift.shift_start_time).to_time
      end_time = (date+" "+shift.shift_end_time).to_time
    when shift.day == 1 && shift.end_day == 2
      start_time = (date+" "+shift.shift_start_time).to_time
      end_time = (date+" "+shift.shift_end_time).to_time+1.day
    else
      start_time = (date+" "+shift.shift_start_time).to_time+1.day
      end_time = (date+" "+shift.shift_end_time).to_time+1.day
    end
    machine_ids = Tenant.find(tenant).machines.where(controller_type: 1).pluck(:id,:machine_name)
    mac_id = machine_ids.map{|i| i[0]}
    full_logs = MachineDailyLog.where(machine_id: mac_id)
    full_parts = Part.where(date: date, shift_no:shift_no, machine_id: mac_id)
    
machine_ids.each do |mac|
      machine_log = full_logs.select{|a| a.machine_id == mac[0]}
      logs = machine_log.select{|a| a.created_at >= start_time && a.created_at < end_time-1 }
      part = full_parts.select{|b|b.machine_id == mac[0] && b.cycle_start != nil && b.part_end_time >= start_time && b.part_end_time < end_time-1}     
      times = Machine.new_run_time(logs, full_logs, start_time, end_time)
      duration = (end_time.to_i - start_time.to_i).to_i
      run = times[:run_time]
      idle = times[:idle_time]
      stop = times[:stop_time]
      utilization = (run*100)/duration
 
       cycle_st_to_st = []
       cutting_time = []
       cycle_stop_to_stop = []
       cycle_time = []
      
      part.each do |p|
       cycle_time << {program_number: p.program_number, cycle_time: p.cycle_time.to_i, parts_count: p.part.to_i} 
       cutting_time << p.cutting_time.to_i
       cycle_st_to_st << p.cycle_start.to_time
       cycle_stop_to_stop << p.part_end_time.to_time
      end
        
      axis_loadd = []
      tempp_val = []
      puls_coder = []

      if logs.present?
        feed_rate_max = logs.pluck(:feed_rate).reject{|i| i == "" || i.nil? || i > 5000 || i == 0 }.map(&:to_i).max
        spindle_speed_max = logs.pluck(:cutting_speed).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).max
        sp_temp_min = logs.pluck(:z_axis).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).min
        sp_temp_max = logs.pluck(:z_axis).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).max
        spindle_load_min = logs.pluck(:spindle_load).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).min
        spindle_load_max = logs.pluck(:spindle_load).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).max
      
	mac_setting_id =  MachineSetting.find_by(machine_id: mac_id).id     
        data_val = MachineSettingList.where(machine_setting_id: mac_setting_id, is_active: true).pluck(:setting_name)

            logs.last.x_axis.first.each_with_index do |key, index|
              if data_val.include?(key[0].to_s)
                load_value =  logs.pluck(:x_axis).sum.pluck(key[0]).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).min.to_s+' - '+logs.pluck(:x_axis).sum.pluck(key[0]).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).max.to_s
                temp_value =  logs.pluck(:y_axis).sum.pluck(key[0]).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).min.to_s+' - '+logs.pluck(:y_axis).sum.pluck(key[0]).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).max.to_s
                puls_value =  logs.pluck(:cycle_time_minutes).sum.pluck(key[0]).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).min.to_s+' - '+logs.pluck(:cycle_time_minutes).sum.pluck(key[0]).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).max.to_s
                
                if load_value == " - "
                  load_value = "0 - 0" 
                end

                if temp_value == " - "
                  temp_value = "0 - 0" 
                end

                if puls_value == " - "
                  puls_value = "0 - 0" 
                end
              
                axis_loadd << {key[0].to_s.split(":").first => load_value}
                tempp_val << {key[0].to_s.split(":").first => temp_value}
                puls_coder << {key[0].to_s.split(":").first => puls_value}
              else
                axis_loadd << {key[0].to_s.split(":").first => "0 - 0"}
                tempp_val <<  {key[0].to_s.split(":").first => "0 - 0"}
                puls_coder << {key[0].to_s.split(":").first => "0 - 0"}
              end
            end


      else
       feed_rate_max = 0
       spindle_speed_max = 0
       sp_temp_min = 0
       sp_temp_max = 0
       spindle_load_min = 0
       spindle_load_max = 0
      end




#      if shift.operator_allocations.where(machine_id: mac[0]).last.nil?
#        operator_id = nil
#        target = 0
#      else
#        if shift.operator_allocations.where(machine_id: mac[0]).present?
#         shift.operator_allocations.where(machine_id: mac[0]).each do |ro|
#         aa = ro.from_date
#         bb = ro.to_date
#         cc = date
#          if cc.to_date.between?(aa.to_date,bb.to_date)
#            dd = ro#cc.to_date.between?(aa.to_date,bb.to_date)
#            if dd.operator_mapping_allocations.where(:date=>date.to_date).last.operator.present?
#              operator_id = dd.operator_mapping_allocations.where(:date=>date.to_date).last.operator.id
#              target = dd.operator_mapping_allocations.where(:date=>date.to_date).last.target
#            else
#              operator_id = nil
#              target = 0
#            end
#          else
#            operator_id = nil
#            target = 0
#          end
##         end
#        else
#          operator_id = nil
#          target = 0
#        end
#       end

   alloc_data = OperatorAllocation.where(shifttransaction_id: shift.id, machine_id: mac[0], date: date.to_time.to_s)

allocation_detail = []
    if alloc_data.present?
     op_detail = alloc_data.last.operator_allot_details
     if op_detail.present?
     # op_name = op_detail.last.operator.operator_name
     op_id = op_detail.pluck(:operator_id)
     op_name = Operator.where(id: op_id).pluck(:operator_name)
	all_part_time = []
	total_target_priya = []
     op_detail.each do |op_li|
#byebug
       single_part_time = op_li.operation_management.std_cycle_time + op_li.operation_management.load_unload_time
       running_hour = (op_li.end_time - op_li.start_time).to_i
       @target = (running_hour/single_part_time).to_i 
       @part = full_parts.select{|b|b.machine_id == mac[0] && b.cycle_start != nil && b.part_end_time >= op_li.start_time && b.part_end_time < op_li.end_time-1}
#######################
		run_hour = duration - shift.break_time.to_i
		@target1 = (run_hour/single_part_time).to_i
		@part1 = part.count.to_f
     
	theoritical_pro = (100 *(@part1/@target1).to_f).round(2)
	all_part_time << theoritical_pro
        test = (@part1/@target1).to_f.round(2)
        total_target_priya << test
########################

#byebug
allocation_detail << {target:@target,operator_id:op_li.operator_id,operation_id:op_li.operation_management_id,parts_produced:@part.count,start_time:op_li.start_time.localtime,end_time:op_li.end_time.localtime}
	
     end
     else
     end
    else
    end
#byebug
		reject_data = MacroSignalOpened.where(signal: "Reject_id", machine_id: mac[0])
                if reject_data.present?
                    if (start_time..end_time).include?(reject_data.first.update_date.to_time.strftime("%Y-%m-%d %H:%M:%S +530")) || reject_data.first.update_date.to_time.strftime("%Y-%m-%d %H:%M:%S +530") <= start_time
                                @rejected_part = reject_data.first[:value]
                    end
                end

		
#available time    ###priya
                 
                   available_time = duration - shift.break_time.to_i
                  
                   avil_bility = (run.to_f / available_time.to_f).round(2)                  
                   availability = (100 *( run.to_f / available_time.to_f)).round(2)

#performance      
	#	   real_production = cutting_time.count
	#	   theoritical_production = all_part_time.sum/all_part_time.size		  #find a average valye for theoritival production
	#	   performance = (100 * (real_production/theoritical_production)).to_f.round(2)   #real_production is actual_part
                   if op_detail.present?
                     
  		   	if op_detail.count == 1 || op_detail == nil
                        perfor = (@part.count.to_f/@target.to_f).to_f
			performance = (100 * (@part.count.to_f/@target.to_f)).to_f
		   	else
                         perfor = total_target_priya.sum/total_target_priya.size
			performance = all_part_time.sum/all_part_time.size
		   	end
		   else
			performance = 0
                        perfor = 0
		   end
#Quality
		   ok_parts_produced = @part.count - @rejected_part.to_i
                   qual = (ok_parts_produced.to_i/@part.count.to_f).round(2)
		   quality = (100 * (ok_parts_produced.to_i/@part.count.to_f)).round(2)				  # ok_parts_produced is accepted part
#OEE
		   oee = (100 * (avil_bility.to_f * perfor.to_f * qual.to_f)).round(2)

##############################priya

#byebug

     
       @alldata << [
                 
        date.to_time,		#data[0]
        start_time.strftime("%H:%M:%S")+' - '+end_time.strftime("%H:%M:%S"),	#data[1]
        duration,	#data[2]
        shift.shift.id,	#data[3]
        shift.shift_no, #data[4]
        operator_id = 1,#(operator) #data[5]
        mac[0], #(machine_id)	#data[6]
        "test", #data7]
        cutting_time.count, #data[8]
        run, #data[9]
        idle, #data[10]
        stop, #data[11]
        0, #data[12]
        logs.count, #data[13]
        utilization, #data[14]
        tenant.id, #data[15]
        cycle_time, #data[16]
        cycle_st_to_st, #data[17]
        feed_rate_max.to_s, #data[18]
        spindle_speed_max.to_s, #data[19]
        part.count, #data[20]
         allocation_detail.sum{|list| list[:target]}, #data[21]
        0, #data[22]
        0, #data[23]
        0, #data[24]
        0, #data[25]
        cycle_stop_to_stop, #data[26]
        cutting_time, #data[27]
        spindle_load_min.to_s+' - '+spindle_load_max.to_s, #data[28]
        sp_temp_min.to_s+' - '+sp_temp_max.to_s, #data[29]
        axis_loadd, #data[30]
        tempp_val, #data[31]
        puls_coder, #data[32]
        0, #data[33] #availability
        0, #data[34] #perfomance
	0, #data[35] #quality
        allocation_detail.pluck(:operator_id), #data[36]
        allocation_detail.pluck(:operation_id), #data[37]
	availability.to_s, #data[38]
	performance.to_s, #data[39]
	quality.to_s, #data[40]
	oee.to_s #data[41]
       ]

end


if @alldata.present?

      @alldata.each do |data|
 
        if CncReport.where(date:data[0],shift_no: data[4], time: data[1], machine_id:data[6], tenant_id:data[15]).present?
          CncReport.find_by(date:data[0],shift_no: data[4], time: data[1], machine_id:data[6], tenant_id:data[15]).update(date:data[0], time: data[1], hour: data[2], shift_id: data[3], shift_no: data[4], machine_id: data[6], job_description: data[7], parts_produced: data[8], run_time: data[9], idle_time: data[10], stop_time: data[11], time_diff: data[12], utilization: data[14],  tenant_id: data[15], all_cycle_time: data[37], cycle_start_to_start: data[17], feed_rate: data[18], spendle_speed: data[19], data_part: data[20], target:data[21], approved: data[23], rework: data[24], reject: data[25], stop_to_start: data[26], cutting_time: data[27],spindle_load: data[28], spindle_m_temp: data[29], servo_load: data[30], servo_m_temp: data[31], puls_code: data[32],availability: data[38], perfomance: data[39], quality: data[40], parts_data: data[16], program_no: data[36], oee:data[41])
        else
          CncReport.create!(date:data[0], time: data[1], hour: data[2], shift_id: data[3], shift_no: data[4], machine_id: data[6], job_description: data[7], parts_produced: data[8], run_time: data[9], idle_time: data[10], stop_time: data[11], time_diff: data[12], utilization: data[14],  tenant_id: data[15], all_cycle_time: data[36], cycle_start_to_start:data[17], feed_rate: data[18], spendle_speed: data[19], data_part: data[20], target:data[21], approved: data[23], rework: data[24], reject: data[25], stop_to_start: data[26], cutting_time: data[27],spindle_load: data[28], spindle_m_temp: data[29], servo_load: data[30], servo_m_temp: data[31], puls_code: data[32],availability: data[38], perfomance: data[39], quality: data[40],parts_data: data[16],program_no: data[36], oee: data[41])
        end
      end
    end
   puts "OKOKOKOKOK"
   puts "OKOKOKOKOK"
   puts "OKOKOKOKOK"
   puts "OKOKOKOKOK"
   puts "OKOKOKOKOK"
   puts "OKOKOKOKOK"
   puts "OKOKOKOKOK"
   hour_report = CommonSetting.hour_report(date,tenant,shift,start_time,end_time,full_logs,full_parts,machine_ids)
end

def self.hour_report(date,tenant,shift,start_time,end_time,full_logs,full_parts,mac_list)
 @all_data = []
	case
      when shift.day == 1 && shift.end_day == 1
        start_time = (date+" "+shift.shift_start_time).to_time
        end_time = (date+" "+shift.shift_end_time).to_time
      when shift.day == 1 && shift.end_day == 2
        start_time = (date+" "+shift.shift_start_time).to_time
        end_time = (date+" "+shift.shift_end_time).to_time+1.day
      else
        start_time = (date+" "+shift.shift_start_time).to_time+1.day
        end_time = (date+" "+shift.shift_end_time).to_time+1.day
      end
     
      (start_time.to_i..end_time.to_i).step(3600) do |hour|
        (hour.to_i+3600 <= end_time.to_i) ? (hour_start_time=Time.at(hour).strftime("%Y-%m-%d %H:%M"),hour_end_time=Time.at(hour.to_i+3600).strftime("%Y-%m-%d %H:%M")) : (hour_start_time=Time.at(hour).strftime("%Y-%m-%d %H:%M"),hour_end_time=Time.at(end_time).strftime("%Y-%m-%d %H:%M"))
          unless hour_start_time[0].to_time == hour_end_time.to_time  
          puts hour_start_time[0].to_time..(hour_end_time.to_time)
          
          mac_list.each do |mac|
           
	   logs = full_logs.select{|i| i.machine_id == mac[0] && i.created_at >= hour_start_time[0].to_time && i.created_at < hour_end_time.to_time-1}
           part = full_parts.select{|b|b.machine_id == mac[0] && b.cycle_start != nil && b.part_end_time >= hour_start_time[0].to_time && b.part_end_time < hour_end_time.to_time-1}
 
	   times = Machine.new_run_time(logs, full_logs, hour_start_time[0].to_time, hour_end_time.to_time)  
           duration = (hour_end_time.to_time).to_i - (hour_start_time[0].to_time).to_i
           run = times[:run_time]
           idle = times[:idle_time]
           stop = times[:stop_time]
           utilization = (run*100)/duration
       cycle_st_to_st = []
       cutting_time = []
       cycle_stop_to_stop = []
       cycle_time = []
      
      part.each do |p|
       cycle_time << {program_number: p.program_number, cycle_time: p.cycle_time.to_i, parts_count: p.part.to_i} 
       cutting_time << p.cutting_time.to_i
       cycle_st_to_st << p.cycle_start.to_time
       cycle_stop_to_stop << p.part_end_time.to_time
      end
	  

      axis_loadd = []
      tempp_val = []
      puls_coder = []

      if logs.present?
        feed_rate_max = logs.pluck(:feed_rate).reject{|i| i == "" || i.nil? || i > 5000 || i == 0 }.map(&:to_i).max
        spindle_speed_max = logs.pluck(:cutting_speed).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).max
        sp_temp_min = logs.pluck(:z_axis).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).min
        sp_temp_max = logs.pluck(:z_axis).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).max
        spindle_load_min = logs.pluck(:spindle_load).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).min
        spindle_load_max = logs.pluck(:spindle_load).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).max
      
	      mac_setting_id =  MachineSetting.find_by(machine_id: mac[0]).id     
        data_val = MachineSettingList.where(machine_setting_id: mac_setting_id, is_active: true).pluck(:setting_name)

        logs.last.x_axis.first.each_with_index do |key, index|
          if data_val.include?(key[0].to_s)
            load_value =  logs.pluck(:x_axis).sum.pluck(key[0]).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).min.to_s+' - '+logs.pluck(:x_axis).sum.pluck(key[0]).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).max.to_s
            temp_value =  logs.pluck(:y_axis).sum.pluck(key[0]).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).min.to_s+' - '+logs.pluck(:y_axis).sum.pluck(key[0]).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).max.to_s
            puls_value =  logs.pluck(:cycle_time_minutes).sum.pluck(key[0]).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).min.to_s+' - '+logs.pluck(:cycle_time_minutes).sum.pluck(key[0]).reject{|i| i == "" || i.nil? || i == 0 }.map(&:to_i).max.to_s
            
            if load_value == " - "
              load_value = "0 - 0" 
            end

            if temp_value == " - "
              temp_value = "0 - 0" 
            end

            if puls_value == " - "
              puls_value = "0 - 0" 
            end
          
            axis_loadd << {key[0].to_s.split(":").first => load_value}
            tempp_val << {key[0].to_s.split(":").first => temp_value}
            puls_coder << {key[0].to_s.split(":").first => puls_value}
          else
            axis_loadd << {key[0].to_s.split(":").first => "0 - 0"}
            tempp_val <<  {key[0].to_s.split(":").first => "0 - 0"}
            puls_coder << {key[0].to_s.split(":").first => "0 - 0"}
          end
        end
      else
       feed_rate_max = 0
       spindle_speed_max = 0
       sp_temp_min = 0
       sp_temp_max = 0
       spindle_load_min = 0
       spindle_load_max = 0
      end





  
    #KOKOKOKO
    alloc_data = OperatorAllocation.where(shifttransaction_id: shift.id, machine_id: mac[0], date: date.to_time.to_s)

    allocation_detail = []
    if alloc_data.present?
     op_detail = alloc_data.last.operator_allot_details
     if op_detail.present?
      byebug     
     op_detail.each do |op_li|


     if op_li.start_time >= hour_start_time[0].to_time && op_li.end_time <= hour_end_time.to_time

     if op_li.start_time =  hour_start_time[0].to_time && op_li.end_time <= hour_end_time.to_time


else
end
else
end














       single_part_time = op_li.operation_management.std_cycle_time + op_li.operation_management.load_unload_time
       running_hour = (op_li.end_time - op_li.start_time).to_i

      target = (running_hour/single_part_time).to_i
      part = full_parts.select{|b|b.machine_id == mac[0] && b.cycle_start != nil && b.part_end_time >= op_li.start_time && b.part_end_time < op_li.end_time-1}

allocation_detail << {target:target,opegator_id:op_li.operator_id,operation_id:op_li.operation_management_id,parts_produced:part.count,start_time:op_li.start_time.localtime,end_time:op_li.end_time.localtime}
     end
     else
     end
    else
    end




       @all_data << [
               date,
               hour_start_time[0].split(" ")[1]+' - '+hour_end_time.split(" ")[1],
               duration,
               shift.shift.id,
               shift.shift_no,
               operator_id,
               mac[0],
               "test",
               cutting_time.count,
               run,
               idle,
               stop,
               0,
               logs.count,
               utilization,
               tenant.id,
               cycle_time,
               cutting_time,  
               spindle_load_min.to_s+' - '+spindle_load_max.to_s,
               sp_temp_min.to_s+' - '+sp_temp_max.to_s,
               axis_loadd,
               tempp_val,
               puls_coder,
               feed_rate_max.to_s,
               spindle_speed_max.to_s
            ]




	  end
	  end 
      end

    if @all_data.present?
      @all_data.each do |data|
        if CncHourReport.where(date:data[0],shift_no: data[4], time: data[1], machine_id:data[6], tenant_id:data[15]).present?
          CncHourReport.find_by(date:data[0],shift_no: data[4], time: data[1], machine_id:data[6], tenant_id:data[15]).update(date:data[0], time: data[1], hour: data[2], shift_id: data[3], shift_no: data[4], operator_id: data[5], machine_id: data[6], job_description: data[7], parts_produced: data[8], run_time: data[9], ideal_time: data[10], stop_time: data[11], time_diff: data[12], log_count: data[13], utilization: data[14],  tenant_id: data[15], all_cycle_time: data[16],cutting_time: data[17],spindle_load: data[18],spindle_m_temp: data[19],servo_load: data[20], servo_m_temp: data[21], puls_code: data[22],feed_rate:data[23], spendle_speed:data[24])
        else
          CncHourReport.create!(date:data[0], time: data[1], hour: data[2], shift_id: data[3], shift_no: data[4], operator_id: data[5], machine_id: data[6], job_description: data[7], parts_produced: data[8], run_time: data[9], ideal_time: data[10], stop_time: data[11], time_diff: data[12], log_count: data[13], utilization: data[14],  tenant_id: data[15], all_cycle_time: data[16],cutting_time: data[17],spindle_load: data[18],spindle_m_temp: data[19],servo_load: data[20], servo_m_temp: data[21], puls_code: data[22],feed_rate:data[23], spendle_speed:data[24])
        end
      end
      end 

end
end
